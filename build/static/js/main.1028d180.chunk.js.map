{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","value","type","className","onChange","e","target","onClick","preventDefault","task","completed","id","Math","round","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","localTodos","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1028d180.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Form({ inputText, setInputText, todos, setTodos, setStatus }) {\r\n\r\n    const inputTextHandler = (e) => {\r\n        setInputText(e.target.value);\r\n    };\r\n\r\n    const submitTodoHandler = (e) => {\r\n        e.preventDefault();\r\n        setTodos([...todos, {task: inputText, completed: false, id: Math.round(Math.random() * 1000)}]);\r\n        setInputText('');\r\n    };\r\n\r\n    const statusHandler = (e) => {\r\n        setStatus(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                <input value={inputText} type=\"text\" className=\"todo-input\" onChange={inputTextHandler}/>\r\n                <button className=\"todo-button\" type=\"submit\" onClick={submitTodoHandler}>\r\n                    <i className=\"fas fa-plus-square\"></i>\r\n                </button>\r\n                <div className=\"select\">\r\n                    <select name=\"todos\" className=\"filter-todo\" onChange={statusHandler}>\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                    </select>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Todo({ task, todo, todos, setTodos }) {\r\n\r\n    const deleteTodoHandler = () => {\r\n        setTodos(todos.filter(el => el.id !== todo.id));\r\n    };\r\n\r\n    const completeTodoHandler = () => {\r\n        setTodos(todos.map(item => {\r\n            if (item.id === todo.id) {\r\n                return {\r\n                    ...item, completed: !item.completed,\r\n                }\r\n            }\r\n            return item;\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <li className={`todo=item ${todo.completed ? \"completed\" : ''}`}>{task}</li>\r\n            <button className=\"complete-btn\" onClick={completeTodoHandler}>\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button className=\"trash-btn\" onClick={deleteTodoHandler}>\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Todo from './Todo.js';\r\n\r\nexport default function TodoList({ todos, setTodos, filteredTodos }) {\r\n\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filteredTodos.map(todo => (\r\n                    <Todo todos={todos}\r\n                          todo={todo}\r\n                          setTodos={setTodos} \r\n                          key={todo.id} \r\n                          task={todo.task}/>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n ","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n// States\n  const [inputText, setInputText] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n// Runs once when the app starts\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n// UseEffect\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n  \n// Functions\n  const filterHandler = () => {\n    switch(status) {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n// Save to local\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  };\n\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      let localTodos = JSON.parse(localStorage.getItem('todos'));\n      setTodos(localTodos);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>David's Todo List</h1>\n      </header>\n      <Form inputText={inputText}\n            setInputText={setInputText} \n            todos={todos} \n            setTodos={setTodos} \n            setStatus={setStatus} />\n      <TodoList todos={todos}\n                setTodos={setTodos}\n                filteredTodos={filteredTodos} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}